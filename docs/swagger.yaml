definitions:
  domain.Item:
    properties:
      id:
        type: string
      name:
        type: string
      size:
        $ref: '#/definitions/domain.Size'
      weightKilograms:
        type: number
    type: object
  domain.ItemData:
    properties:
      count:
        type: integer
      item:
        $ref: '#/definitions/domain.Item'
    type: object
  domain.Location:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    required:
    - latitude
    - longitude
    type: object
  domain.Reservation:
    properties:
      destinationLocation:
        $ref: '#/definitions/domain.Location'
      entries:
        items:
          $ref: '#/definitions/domain.ReserveEntry'
        type: array
      id:
        type: string
    type: object
  domain.ReserveEntry:
    properties:
      count:
        type: integer
      itemID:
        type: string
      sourceStorehouseID:
        type: string
    required:
    - count
    - itemID
    type: object
  domain.ReserveRequest:
    properties:
      destinationLocation:
        $ref: '#/definitions/domain.Location'
      itemsToReserve:
        items:
          $ref: '#/definitions/domain.ReserveEntry'
        type: array
    type: object
  domain.Size:
    properties:
      heightMeters:
        type: number
      lengthMeters:
        type: number
      widthMeters:
        type: number
    type: object
  ports.GetUnreservedResponseDTO:
    properties:
      items:
        items:
          $ref: '#/definitions/domain.ItemData'
        type: array
      storehouseID:
        type: string
    type: object
  ports.ReleaseRequestDTO:
    properties:
      itemsToRelease:
        items:
          $ref: '#/definitions/domain.ReserveEntry'
        type: array
      reservationID:
        type: string
    required:
    - reservationID
    type: object
  ports.ReservationResponseDTO:
    properties:
      reservation:
        $ref: '#/definitions/domain.Reservation'
      totalCost:
        type: number
    type: object
info:
  contact: {}
  title: Reservation microservice
  version: "1.0"
paths:
  /get-unreserved-items:
    get:
      consumes:
      - application/json
      description: Returns all unreserved items for given storehouse
      parameters:
      - description: storehouse ID
        in: query
        name: storehouse-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ports.GetUnreservedResponseDTO'
        "400":
          description: Bad Request
          schema:
            type: string
      tags:
      - reservation
  /release:
    post:
      consumes:
      - application/json
      description: Releases items for given reservation. If there is no items left,
        deleted the reservation
      parameters:
      - description: reservation ID and items to release
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/ports.ReleaseRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ports.ReservationResponseDTO'
        "400":
          description: Bad Request
          schema:
            type: string
      tags:
      - reservation
  /reserve:
    post:
      consumes:
      - application/json
      description: Creates a reservation for given items if storehouse have required
        amount
      parameters:
      - description: destination location and items to reserve
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.ReserveRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ports.ReservationResponseDTO'
        "400":
          description: Bad Request
          schema:
            type: string
      tags:
      - reservation
swagger: "2.0"
